doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Build your own database with LevelDB and Node.js

    link(rel="icon", type="image/png", href="images/favicon.png")
    link(rel="apple-touch-icon", type="image/png" href="images/default-apple-touch-icon.png")

    // build:css styles/styles.css
    //- Check out 'src/bower_components/prism/themes/' for available themes
    link(rel='stylesheet', type='text/css', href='bower_components/prism/themes/prism-tomorrow.css')
    link(rel="stylesheet", type='text/css', href="bower_components/font-awesome/css/font-awesome.min.css")
    link(rel='stylesheet', type='text/css', href='styles/main.css')
    // endbuild

  body

    article

      section
        a(href="https://github.com/mcollina/levelup-talk-cloudconf")
          img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://s3.amazonaws.com/github/ribbons/forkme_right_red_aa0000.png")
        h1 Build your own database with LevelDB and Node.js
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>
        img(src="images/logo.svg")

      section(data-bespoke-state='consultant')
        h2 Any problems with your database?
        .copyright
          a(href="http://500px.com/photo/22823315", style="color: white") http://500px.com/photo/22823315&nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="images/cc_attribution.png")

      section(data-bespoke-state='consultant')
        h2 Call your consultant!

      section(data-bespoke-state='history')
        h3 This is not a database ;)

      section(data-bespoke-state='history').blackbg
        h2 History Pills
        ul
         li(data-bespoke-bullet) 1960s: From tapes and batch to disks, shared access and interactivity
         li(data-bespoke-bullet) Late 1960s: Navigational Databases, links
         li(data-bespoke-bullet) Early 1970s: Relational Model
         li(data-bespoke-bullet) Late 1970s: SQL
         li(data-bespoke-bullet) Early 1980s: Desktop Databases
         li(data-bespoke-bullet) Late 1980s: Object Oriented Database
         li(data-bespoke-bullet) 2000s: speed and scale, NoSQL
         li(data-bespoke-bullet) Early 2010s: never let a beautiful abstraction go to waste, NewSQL

      section(data-bespoke-state='tirant')
        h3 The tiranny of beautiful abstractions

      section
        h2 What is a database?
        h3
          | A database is a tool for interacting with structured
          | data, externalized from the core of our application

      section
        h2 What we need from a database?
        ul
          li(data-bespoke-bullet) persistence
          li(data-bespoke-bullet) performance
          li(data-bespoke-bullet) simpliciy to access complex data
          li(data-bespoke-bullet)
            em sometimes&nbsp;
            | shared access
          li(data-bespoke-bullet)
            em sometimes&nbsp;
            | scalability

      section(data-bespoke-state='cooking')
        h2 My Secret Ingredients for a Database
        .copyright
          a(href="http://500px.com/photo/52159764", style="color: white") http://500px.com/photo/52159764 &nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="images/cc_attribution.png")

      section(data-bespoke-state='cooking')
        img(src="images/node.png")
        br
        img(src="images/npm.png")
        ul
          li Small core, vibrant community
          li Extreme modularity
          li Reimplement everything in Javascript

      section(data-bespoke-state='cooking')
        h2 LevelUp!
        br
        h3.bullet
          a(href="http://github.com/rvagg/node-levelup", style="color: white") http://github.com/rvagg/node-levelup
        h3.bullet
          em The&nbsp;
          a(href="http://leveldb.googlecode.com") LevelDB&nbsp;
          | library for Node.js
        h3.bullet
          a(href="http://leveldb.googlecode.com") LevelDB&nbsp;
          | is an&nbsp;
          em ordered&nbsp;
          | key-value store that can be embedded in ANY app

        .copyright
          a(href="http://500px.com/photo/52159764", style="color: white") http://500px.com/photo/52159764 &nbsp;
          a(href="http://creativecommons.org/licenses/by/3.0/deed.en_US")
            img(src="images/cc_attribution.png")

      section.full-imgs
        h2 LevelDB
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block; text-align: left;")
            | basic features:
            ul
              li(data-bespoke-bullet) get
              li(data-bespoke-bullet) put
              li(data-bespoke-bullet) del
              li(data-bespoke-bullet) batch
              li(data-bespoke-bullet) ordered iterator
          div(style="width: 50%; display: inline-block; float: left;")
            img(src="images/example_leveldb.png")

      section
        h2 LevelUp
        h3
          | The Node.js binding for LevelDB,
          | let's build our database in Javascript!

      section
        h2 LevelUp
        pre
          code(data-bespoke-autorun).language-javascript.
            var db = level('your_database')
            db.put('a', 'b', function() {
              db.put('b', 'c', function() {
                db.get('a', function(err, data) {
                  alert(JSON.stringify(data))
                })
              })
            })

      section
        h2 ReadStream
        pre
          code(data-bespoke-autorun).language-javascript.
            var db = level('your_database')
            var stream = db.createReadStream({
              start: 'a',
              end: 'd'
            })
            stream.on('data', function(data) {
              alert(JSON.stringify(data))
            })
            stream.on('end', function() {
              alert('end!')
            })

      section
        h3 LevelUp's Ecosystem
        table.ecosystem
          tr.tools
              td.section
                span Tools
              td
                table
                  tr
                    td lev
                    td levelweb
                    td
                    td
                    td
            tr.packages
              td.section
                span Packages
              td
                table
                  tr
                    td tacodb
                    td couchup
                    td LevelGraph
                    td firedup
                    td level-assoc
                    td
                    td
                    td
                  tr
                    td level-static
                    td level-store
                    td level-session
                    td level-fs
                    td LevelTTLCache
                    td
                    td
                    td
            tr.extensions
              td.section
                span Extensions
              td
                table
                  tr
                    td level-live-stream
                    td map-reduce
                    td level-queryengine
                    td Level-Multiply
                    td
                    td
                    td
                  tr
                    td multilevel
                    td level-replicate
                    td level-master
                    td Level TTL
                    td
                    td
                    td
            tr.pluggability
              td.section
                span Extensibility
              td
                table
                  tr
                    td sublevel
                    td level-hooks
                    td level-mutex
                    td
                    td
                    td
            tr.core
              td.section
                span Core
              td(colspan='10')
                table
                  tr
                    td
                      | LevelUP
            tr.storage
              td.section
                span Storage
              td(colspan='10')
                table
                  tr
                    td.rotate
                      span
                        b LevelDOWN
                    td.rotate
                      span LevelDOWN (Hyper)
                    td.rotate
                      span LevelDOWN (Basho)
                    td.rotate
                      span LevelDOWN (RocksDB)
                    td.rotate
                      span MemDOWN
                    td.rotate
                      span level.js
                    td.rotate
                      span leveldown-gap
                    td.rotate
                      span LMDB
                    td.rotate
                      span mysqlDOWN

      section(data-bespoke-state='levelmeup')
        h2
          | http://npm.im/levelmeup

      section.full-imgs
        h2 LevelUp's BDFL: @rvagg
        img(src="images/bdfl.png")

      section.full-imgs
        h2 LevelUp's Committers
        img(src="images/committers.png")

      section.committers
        h2 LevelUp's Committers
        include includes/committers.html

      section
        h2 You can use LevelUp to build the database YOU want
        h3 I built a graph database!

      section
        h2 What is a Graph Database?

      section
        h3(style="text-align: left; width: 500px")
          i(style="float: left; padding-right: 20px").fa.fa-quote-left.fa-2x
          | a graph database is any storage system that provides index-free adjacency
          br
        h3
          em Anonymous Wikipedian

      section.full-imgs
        h2 Models and Relationships
        br
        br
        br
        table
          thead
            tr
              th Model
              th Example
              th Fast for Relationships
          tbody
            tr
              td Documental
              td MongoDB
              td(style="background-color: red")
            tr
              td Relational
              td MySQL
              td(style="background-color: yellow")
            tr
              td Graph
              td OrientDB
              td(style="background-color: green")

        // A graph database is <em>fast</em> at traversing relations.

      section.full-imgs
        h2 The smallest possible graph
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block;")
            ul.bullet
              li(data-bespoke-bullet) "A" is called <em>subject</em>
              li(data-bespoke-bullet) "B" is called <em>object</em>
              li(data-bespoke-bullet) "A" and "B" are also called <em>vertexes</em>
              li(data-bespoke-bullet) "C" is called <em>predicate</em>
              li(data-bespoke-bullet) "C" is also called <em>arc</em>
          div(style="width: 70%; display: inline-block; float: left; margin-left: -10%;")
            img(src="images/basic_graph.png")

      section.full-imgs
        h2 Query Examples
        br
        br
        div
          div(style="width: 40%; float: right; display: inline-block;")
            ul.bullet
              li(data-bespoke-bullet) Give me all the vertex that go from "A"
              li(data-bespoke-bullet) Give me all the pairs connected by "C"
              li(data-bespoke-bullet) Give me all the vertex that go to "B"
              li(data-bespoke-bullet) Give me all the vertex that go to "B" <em>through "C"</em>
              li(data-bespoke-bullet) ...
          div(style="width: 70%; display: inline-block; float: left; margin-left: -10%;")
            img(src="images/basic_graph.png")

      section.full-imgs
        h2 Hexastore: the fastest data structure for a Graph
        img(src="images/hexastore.png")
        .copyright
          a(href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.140.8776&rep=rep1&type=pdf")
            | Weiss et al.,
            em "Hexastore: Sextuple Indexing for Semantic Web Data Management"

      section
        h2 How to use LevelUp to build a Graph Database
        h1
          i.fa.fa-question-circle.fa-2x

        h3 Let's build an Hexastore!

      section.full-imgs
        h2 Hexastore
        br
        br
        div
          div(style="width: 50%; text-align: left; float: right; display: inline-block;")
            | We store 6 keys for each triple:
            ul.bullet
              li(data-bespoke-bullet) spo::A::C::B
              li(data-bespoke-bullet) sop::A::B::C
              li(data-bespoke-bullet) ops::B::C::A
              li(data-bespoke-bullet) osp::B::A::C
              li(data-bespoke-bullet) pso::C::A::B
              li(data-bespoke-bullet) pos::C::B::A
          div(style="width: 60%; display: inline-block; float: left; margin-left: -10%;")
            img(src="images/basic_graph.png")

      section
        h2 Put a Triple in LevelDB
        pre
          code(data-bespoke-autorun).language-javascript.
            var db = level('your_database')
            var triple = JSON.stringify({
              subject: 'A', predicate: 'C', object: 'B'
            })
            db.batch([
              { key: 'spo::A::C::B', value: triple, type: 'put' },
              { key: 'sop::A::B::C', value: triple, type: 'put' },
              { key: 'ops::B::C::A', value: triple, type: 'put' },
              { key: 'osp::B::A::C', value: triple, type: 'put' },
              { key: 'pso::C::A::B', value: triple, type: 'put' },
              { key: 'pos::C::B::A', value: triple, type: 'put' }
            ], alert.bind(null, 'Batch completed!'))


      section
        h2 Ask a Triple to LevelDB
        p
          em all nodes that are connected by "C"
        pre
          code(data-bespoke-autorun).language-javascript.
            var db = level('your_database')
            var stream = db.createReadStream({
              start: 'pso::C::',
              end:   'pso::C::\xff'
            })

            stream.on('data', function(data) {
              alert(data.value)
            })

      section.full-imgs
        h2 LevelGraph
        div
          img(src="images/logo.png")

        h3 <a href="http://github.com/mcollina/levelgraph">http://github.com/mcollina/levelgraph</a>

      section
        h2 LevelGraph
        ul
          li(data-bespoke-bullet) is an Hexastore built on LevelDB and LevelUp
          li(data-bespoke-bullet) v0.1.0 was built on the night between the 25th and 26th of April 2013
          li(data-bespoke-bullet) v0.8.0 was released this Christmas
          li(data-bespoke-bullet) 250+ commits and counting
          li(data-bespoke-bullet) works on Node and in the Browser
          li(data-bespoke-bullet) small in size (&lt; 1000 own lines of code)
          li(data-bespoke-bullet) big on dependencies (~ 11000 lines of code)
          li(data-bespoke-bullet) available on npm, bower or straight from github

      section
        h2 Put Triples in LevelGraph
        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')

            var triples = [{
              subject: 'A', predicate: 'C', object: 'B'
            }, {
              subject: 'D', predicate: 'C', object: 'E'
            }]

            graph.put(triples, function(err) {
              alert(err || "Successful!")
            })


      section
        h2 Ask Triples to LevelGraph
        p
          em all nodes that are connected by "C"
        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')
            var query = { predicate: 'C' }

            graph.get(query, function(err, triples) {
              alert(JSON.stringify(triples))
            })

      section
        h2 Deleting Triples in LevelGraph
        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')
            var triples = [
              { subject: 'A', predicate: 'C', object: 'B' },
              { subject: 'D', predicate: 'C', object: 'E' }
            ]
            graph.del(triples, function(err) {
              graph.get({ predicate: 'C' }, function(err, triples) {
                alert('LG found ' + triples.length + ' triples')
              })
            })


      section
        h2 Stream Triples in LevelGraph
        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')
            var stream = graph.putStream()

            stream.write({
              subject: 'matteo', predicate: 'friend', object: 'lucio'
            })
            stream.write({
              subject: 'lucio', predicate: 'likes', object: 'beer'
            })
            stream.write({
              subject: 'lucio', predicate: 'lives', object: 'brescia'
            })
            stream.end(null, alert.bind(null, 'Successful!'))


      section
        h2 Stream Triples out of LevelGraph
        p
          em all people that likes beer
        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')

            var stream = graph.getStream({
              predicate: 'likes',
              object: 'beer'
            })

            stream.on('data', function(triple) {
              alert(JSON.stringify(triple))
            })


      section
        h2 Is it all?
        h3 We did not build a graph &nbsp;
          em just &nbsp;
          | for this, right?

      section
        h2 Searches
        p(style="width: 100%")
          em All my friends that like beer and live in Brescia

        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')
            var x = graph.v('x')
            graph.search([
              { subject: 'matteo', predicate: 'friend', object: x },
              { subject: x, predicate: 'likes', object: 'beer' },
              { subject: x, predicate: 'lives', object: 'brescia' }
            ], function(err, solutions) {
              alert(JSON.stringify(solutions))
            })


      section
        h2 Searches
        p(style="width: 100%")
          em All my friends that like beer and live in Brescia, with Streams

        pre
          code(data-bespoke-autorun).language-javascript.
            var graph = levelgraph('your_graph')
            var x = graph.v('x')
            var stream = graph.searchStream([
              { subject: 'matteo', predicate: 'friend', object: x },
              { subject: x, predicate: 'likes', object: 'beer' },
              { subject: x, predicate: 'lives', object: 'brescia' }
            ]);

            stream.on('data', function(triple) {
              alert(JSON.stringify(triple))
            })


      section
        h2 How fast is LevelGraph?
        i(style="font-size: 500%").fa.fa-rocket
        ul.bullet
          li
            b GET &nbsp;
            | Up to 50.000 triples per second
          li
            b PUT &nbsp;
            | Up to 22.000 triples per second
          li
            b SEARCH &nbsp;
            | Up to 20.000 triples per second for two conditions

      section
        h2 ..but I want to store JS Objects!

      section
        h2 LevelGraph-JSONLD
        h3 an Object Document Mapper for LevelGraph

        pre
          code.language-javascript.
            var db = jsonld(levelgraph('jsonld'));
            db.jsonld.put({
              "@context": {
                "name": "http://xmlns.com/foaf/0.1/name",
                "knows": "http://xmlns.com/foaf/0.1/knows" },
              "@id": "http://matteocollina.com",
              "name": "Matteo",
              "knows": [ { "name": "Daniele" }
                         { "name": "Lucio"   } ]
            })

      section.full-imgs
        h2 LevelGraph
        div
          img(src="images/logo.png")

        h3 <a href="http://github.com/mcollina/levelgraph">http://github.com/mcollina/levelgraph</a>

      section.full-imgs
        img(src='images/me.png')
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h2 Yet Another Node.js Course
        h3 Node.js Basics

        a(href="http://www.insana-academy.com/node-js-basics/") http://www.insana-academy.com/node-js-basics/

        ul
          li Events, Streams, Buffer, HTTP, Ereditarietà
          li Testing con Mocha, Chai e Sinon
          li Express
          li WebSocket
          li Grunt
          li MongoDB and Mongoose
          li ... lots of fun in Italian! :)

      section
        h3 My Book: JavaScript Best Practices
        a(href='http://www.jsbestpractices.it')
          img(src='images/jsbestpractices.jpg', style='width: 250px')

      section
        h1 Thanks!
        br
        p If you need help with node.js:
        br
        h3 <a href="mailto:hello@matteocollina.com">hello@matteocollina.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    // build:js scripts/scripts.js
    script(src='bower_components/bespoke.js/dist/bespoke.min.js')
    script(src='bower_components/bespoke-keys/dist/bespoke-keys.min.js')
    script(src='bower_components/bespoke-touch/dist/bespoke-touch.min.js')
    script(src='bower_components/bespoke-bullets/dist/bespoke-bullets.min.js')
    script(src='bower_components/bespoke-scale/dist/bespoke-scale.min.js')
    script(src='bower_components/bespoke-hash/dist/bespoke-hash.min.js')
    script(src='bower_components/bespoke-progress/dist/bespoke-progress.min.js')
    script(src='bower_components/bespoke-state/dist/bespoke-state.min.js')
    script(src='bower_components/bespoke-forms/dist/bespoke-forms.min.js')
    script(src='bower_components/bespoke-run/dist/bespoke-run.js')
    script(src='bower_components/prism/prism.js')
    script(src='scripts/bundle.js')
    script(src='scripts/main.js')
    // endbuild

    script.
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-47475655-1', 'levelgraph.io');
      ga('send', 'pageview');
